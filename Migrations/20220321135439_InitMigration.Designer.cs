// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.DB;

namespace TodoList.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20220321135439_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TodoList.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TodoList.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Văn Học"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Giáo Khoa"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Thiếu Nhi"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Tâm Lý - Kỹ Năng Sống"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Manga - Comic"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Sách Học Ngoại Ngữ"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Kinh Tế"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Khoa Học Kỹ Thuật"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Lịch Sử - Địa Lý - Tôn Giáo"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Nuôi Dạy Con"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Chính Trị - Pháp Lý - Triết Học"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Nữ Công Gia Chánh"
                        });
                });

            modelBuilder.Entity("TodoList.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 168, DateTimeKind.Local).AddTicks(6887),
                            Description = "Molestiae animi corporis in beatae. Ut ab est ullam harum consequatur molestias. Omnis rerum est necessitatibus quam eum.",
                            Name = "Khuôn Mặt Người Khác",
                            Price = 103000.0,
                            Quantity = 20,
                            Sku = "S1",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 171, DateTimeKind.Local).AddTicks(2158)
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 204, DateTimeKind.Local).AddTicks(250),
                            Description = "Dicta dolorum ipsa consequatur in. Sapiente voluptatibus et aut reprehenderit magnam accusantium sed officia voluptas. Praesentium ratione dolor quidem voluptas sit quam atque voluptas nostrum.",
                            Name = "Hội Vệ Nhân",
                            Price = 152000.0,
                            Quantity = 20,
                            Sku = "S2",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 204, DateTimeKind.Local).AddTicks(295)
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 204, DateTimeKind.Local).AddTicks(8275),
                            Description = "Qui nam placeat expedita est adipisci et. Sint nobis est error corrupti. Facere sed eum sit.",
                            Name = "Khuôn Mặt Người Khác",
                            Price = 103.53,
                            Quantity = 20,
                            Sku = "S3",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 204, DateTimeKind.Local).AddTicks(8289)
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 205, DateTimeKind.Local).AddTicks(3600),
                            Description = "Est expedita inventore est ea. Reprehenderit ipsa et inventore hic magnam eveniet consequatur occaecati et. Porro est ullam qui non deleniti voluptas a voluptas.",
                            Name = "Giọt rừng",
                            Price = 86000.0,
                            Quantity = 20,
                            Sku = "S4",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 205, DateTimeKind.Local).AddTicks(3612)
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 206, DateTimeKind.Local).AddTicks(1107),
                            Description = "Enim eaque eius quisquam quas nesciunt. Ut ut mollitia voluptatum harum ipsam quam iure. Voluptatibus non aut ut ipsum quo.",
                            Name = "Người rủ ngủ",
                            Price = 120000.0,
                            Quantity = 20,
                            Sku = "S5",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 206, DateTimeKind.Local).AddTicks(1119)
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 206, DateTimeKind.Local).AddTicks(7104),
                            Description = "Repellendus dolorum vero incidunt. Officia autem nemo aspernatur delectus autem. Voluptatem voluptatum repellat quae.",
                            Name = "Mong Mẹ Hãy Yêu Lấy Chính Mình",
                            Price = 86000.0,
                            Quantity = 20,
                            Sku = "S6",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 206, DateTimeKind.Local).AddTicks(7113)
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 207, DateTimeKind.Local).AddTicks(1956),
                            Description = "Omnis laboriosam non est veniam expedita ab quam et. Est facere perspiciatis nostrum aut corrupti ut est doloribus tenetur. Et atque commodi minima sint.",
                            Name = "The Friend - Bạn Đồng Hành",
                            Price = 95000.0,
                            Quantity = 20,
                            Sku = "S7",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 207, DateTimeKind.Local).AddTicks(1968)
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 207, DateTimeKind.Local).AddTicks(9403),
                            Description = "Sapiente temporibus aliquam harum quidem aliquid. Omnis animi autem molestiae aliquid. Non culpa et expedita et labore perspiciatis.",
                            Name = "Khải Vi Về Cõi Vô Hình",
                            Price = 130000.0,
                            Quantity = 20,
                            Sku = "S8",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 207, DateTimeKind.Local).AddTicks(9413)
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 208, DateTimeKind.Local).AddTicks(5218),
                            Description = "Atque et neque laudantium laboriosam voluptatem. Qui recusandae quo incidunt recusandae voluptatem voluptatum iure eveniet corrupti. Natus maiores tempore dolores non.",
                            Name = "Thần Thoại Hy Lạp",
                            Price = 191000.0,
                            Quantity = 20,
                            Sku = "S9",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 208, DateTimeKind.Local).AddTicks(5229)
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 215, DateTimeKind.Local).AddTicks(5002),
                            Description = "Odit aspernatur molestiae sint dignissimos voluptate et. Aut molestias sequi autem quia quasi. Optio ea quisquam officiis et dolorum placeat nihil vero quo.",
                            Name = "Lì quá để nói quài",
                            Price = 67000.0,
                            Quantity = 20,
                            Sku = "S10",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 215, DateTimeKind.Local).AddTicks(5050)
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 216, DateTimeKind.Local).AddTicks(4149),
                            Description = "Voluptatem vel illo quae ut iusto assumenda perferendis repellat fugiat. Magnam harum voluptatum ipsa saepe atque nesciunt non. Dolor facilis et aut et unde aut commodi.",
                            Name = "Cỏ Khô Lầm Lỡ Muốt Mùa",
                            Price = 180000.0,
                            Quantity = 20,
                            Sku = "S11",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 216, DateTimeKind.Local).AddTicks(4183)
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 217, DateTimeKind.Local).AddTicks(2955),
                            Description = "Et est aperiam provident eos. Expedita expedita aut unde neque dolorum id. Quasi consectetur necessitatibus ex laboriosam.",
                            Name = "Hiểm Họa Ở Nhà Kết",
                            Price = 91000.0,
                            Quantity = 20,
                            Sku = "S12",
                            UpdatedAt = new DateTime(2022, 3, 21, 20, 54, 38, 217, DateTimeKind.Local).AddTicks(2985)
                        });
                });

            modelBuilder.Entity("TodoList.Entities.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoList.Entities.Product", b =>
                {
                    b.HasOne("TodoList.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
