// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.DB;

namespace TodoList.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20220323101001_UpdateUpdatedAtProduct")]
    partial class UpdateUpdatedAtProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TodoList.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TodoList.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Văn Học"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Giáo Khoa"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Thiếu Nhi"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Tâm Lý - Kỹ Năng Sống"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Manga - Comic"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Sách Học Ngoại Ngữ"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Kinh Tế"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Khoa Học Kỹ Thuật"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Lịch Sử - Địa Lý - Tôn Giáo"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Nuôi Dạy Con"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Chính Trị - Pháp Lý - Triết Học"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Nữ Công Gia Chánh"
                        });
                });

            modelBuilder.Entity("TodoList.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 379, DateTimeKind.Utc).AddTicks(6892),
                            Description = "Laborum quam et tenetur vel provident cupiditate sunt. Voluptas at beatae repudiandae. Quasi ut quod dolor molestiae.",
                            Name = "Khuôn Mặt Người Khác",
                            Price = 103000.0,
                            Quantity = 20,
                            Sku = "S1"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 404, DateTimeKind.Utc).AddTicks(9037),
                            Description = "Voluptatem maiores sit et voluptatem. Et nulla assumenda aperiam illum ratione odio exercitationem. Mollitia sed omnis sed dolorum est.",
                            Name = "Hội Vệ Nhân",
                            Price = 152000.0,
                            Quantity = 20,
                            Sku = "S2"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 405, DateTimeKind.Utc).AddTicks(5490),
                            Description = "Accusantium qui similique animi beatae. Omnis quo nisi omnis voluptatibus dolorem. Doloribus veniam aperiam iure id ut impedit qui quia quia.",
                            Name = "Khuôn Mặt Người Khác",
                            Price = 103.53,
                            Quantity = 20,
                            Sku = "S3"
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 406, DateTimeKind.Utc).AddTicks(2126),
                            Description = "Qui voluptatem natus minima quod quos. Dolor ut alias distinctio voluptatem. Omnis aut dolorem mollitia numquam sunt iure beatae ducimus earum.",
                            Name = "Giọt rừng",
                            Price = 86000.0,
                            Quantity = 20,
                            Sku = "S4"
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 406, DateTimeKind.Utc).AddTicks(8655),
                            Description = "Voluptas vitae officia voluptatem inventore pariatur. Nulla dolor labore magnam. Recusandae rerum doloribus veniam.",
                            Name = "Người rủ ngủ",
                            Price = 120000.0,
                            Quantity = 20,
                            Sku = "S5"
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 407, DateTimeKind.Utc).AddTicks(4151),
                            Description = "Enim aperiam repellendus error ratione odio error voluptas vel. Ea ab aut voluptas occaecati. Omnis perferendis minus atque enim ea maxime minima et voluptatem.",
                            Name = "Mong Mẹ Hãy Yêu Lấy Chính Mình",
                            Price = 86000.0,
                            Quantity = 20,
                            Sku = "S6"
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 416, DateTimeKind.Utc).AddTicks(2900),
                            Description = "Eius animi aliquid quisquam non necessitatibus aut molestiae. Voluptatem vel eum veritatis aut id fuga. Quasi ipsum dolore optio autem.",
                            Name = "The Friend - Bạn Đồng Hành",
                            Price = 95000.0,
                            Quantity = 20,
                            Sku = "S7"
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 416, DateTimeKind.Utc).AddTicks(9870),
                            Description = "Autem consequuntur beatae vitae est optio. Praesentium et vitae repellat. Dolor aliquam hic voluptate itaque voluptates qui voluptate qui.",
                            Name = "Khải Vi Về Cõi Vô Hình",
                            Price = 130000.0,
                            Quantity = 20,
                            Sku = "S8"
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 417, DateTimeKind.Utc).AddTicks(7580),
                            Description = "Et est possimus velit maxime perferendis perspiciatis esse accusamus rerum. Qui ea quis tenetur voluptas molestiae rerum delectus iure. Est rerum sint quo saepe voluptatibus ducimus reiciendis voluptates.",
                            Name = "Thần Thoại Hy Lạp",
                            Price = 191000.0,
                            Quantity = 20,
                            Sku = "S9"
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 418, DateTimeKind.Utc).AddTicks(6529),
                            Description = "Provident excepturi adipisci et enim quam. Numquam excepturi itaque sunt tempora assumenda itaque. Molestias et id sint sed.",
                            Name = "Lì quá để nói quài",
                            Price = 67000.0,
                            Quantity = 20,
                            Sku = "S10"
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 419, DateTimeKind.Utc).AddTicks(2761),
                            Description = "Non repellat pariatur mollitia libero. Consequatur voluptatem ut non est sit voluptates et. Consequatur non voluptas eos nihil.",
                            Name = "Cỏ Khô Lầm Lỡ Muốt Mùa",
                            Price = 180000.0,
                            Quantity = 20,
                            Sku = "S11"
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2022, 3, 23, 10, 10, 0, 419, DateTimeKind.Utc).AddTicks(8471),
                            Description = "Praesentium ipsum labore eum deleniti itaque odit vitae et voluptatibus. Tempore perspiciatis veniam et eos. Nesciunt quae autem quae quam autem.",
                            Name = "Hiểm Họa Ở Nhà Kết",
                            Price = 91000.0,
                            Quantity = 20,
                            Sku = "S12"
                        });
                });

            modelBuilder.Entity("TodoList.Entities.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TodoList.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoList.Entities.Product", b =>
                {
                    b.HasOne("TodoList.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
